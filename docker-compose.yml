version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aquaculture-postgres
    environment:
      POSTGRES_USER: aquaculture
      POSTGRES_PASSWORD: aquaculture123
      POSTGRES_DB: aquaculture_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aquaculture"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aquaculture-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aquaculture-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aquaculture-network

  # Kafka (with Zookeeper)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: aquaculture-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - aquaculture-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: aquaculture-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - aquaculture-network

  # API Service
  api:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.api
    container_name: aquaculture-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://aquaculture:aquaculture123@postgres:5432/aquaculture_db
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    volumes:
      - ./services/api:/app/services/api
      - ./data:/app/data
    networks:
      - aquaculture-network
    restart: unless-stopped

  # ML Service
  ml-service:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.ml
    container_name: aquaculture-ml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://aquaculture:aquaculture123@postgres:5432/aquaculture_db
      - REDIS_URL=redis://redis:6379/0
      - MODEL_PATH=/app/models/fish_classifier.pth
      - BATCH_SIZE=32
    volumes:
      - ./services/ml-service:/app/services/ml-service
      - ./data/models:/app/models
      - ./data:/app/data
    networks:
      - aquaculture-network
    restart: unless-stopped
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: aquaculture-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - aquaculture-network
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:10.2.2
    container_name: aquaculture-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    networks:
      - aquaculture-network
    restart: unless-stopped

  # Worker Service (Celery)
  worker:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.api
    container_name: aquaculture-worker
    command: celery -A services.worker.celery_app worker --loglevel=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - DATABASE_URL=postgresql://aquaculture:aquaculture123@postgres:5432/aquaculture_db
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./services/worker:/app/services/worker
      - ./data:/app/data
    networks:
      - aquaculture-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  aquaculture-network:
    driver: bridge
